// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: role.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "role";

export interface CreateRoleRequest {
  name: string;
}

export interface GetRolesRequest {
}

export interface GetRoleRequest {
  id: number;
}

export interface UpdateRoleRequest {
  id: number;
  name: string;
}

export interface DeleteRoleRequest {
  id: number;
}

export interface RoleResponse {
  id: number;
  name: string;
}

export interface RolesResponse {
  roles: RoleResponse[];
}

export interface DeleteRoleResponse {
  success: boolean;
}

export const ROLE_PACKAGE_NAME = "role";

export interface RoleServiceClient {
  createRole(request: CreateRoleRequest): Observable<RoleResponse>;

  getRoles(request: GetRolesRequest): Observable<RolesResponse>;

  getRole(request: GetRoleRequest): Observable<RoleResponse>;

  updateRole(request: UpdateRoleRequest): Observable<RoleResponse>;

  deleteRole(request: DeleteRoleRequest): Observable<DeleteRoleResponse>;
}

export interface RoleServiceController {
  createRole(request: CreateRoleRequest): Promise<RoleResponse> | Observable<RoleResponse> | RoleResponse;

  getRoles(request: GetRolesRequest): Promise<RolesResponse> | Observable<RolesResponse> | RolesResponse;

  getRole(request: GetRoleRequest): Promise<RoleResponse> | Observable<RoleResponse> | RoleResponse;

  updateRole(request: UpdateRoleRequest): Promise<RoleResponse> | Observable<RoleResponse> | RoleResponse;

  deleteRole(
    request: DeleteRoleRequest,
  ): Promise<DeleteRoleResponse> | Observable<DeleteRoleResponse> | DeleteRoleResponse;
}

export function RoleServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createRole", "getRoles", "getRole", "updateRole", "deleteRole"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RoleService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RoleService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ROLE_SERVICE_NAME = "RoleService";
