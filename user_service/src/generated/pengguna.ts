// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: pengguna.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { RoleResponse } from "./role";

export const protobufPackage = "pengguna";

export interface CreatePenggunaRequest {
  username: string;
  name: string;
  password: string;
  roleId: number;
}

export interface GetPenggunasRequest {
}

export interface GetPenggunaRequest {
  id: number;
}

export interface UpdatePenggunaRequest {
  id: number;
  username: string;
  name: string;
  password: string;
  roleId: number;
}

export interface DeletePenggunaRequest {
  id: number;
}

export interface PenggunaResponse {
  id: number;
  username: string;
  name: string;
  role: RoleResponse | undefined;
}

export interface GetPenggunasResponse {
  penggunas: PenggunaResponse[];
}

export interface DeletePenggunaResponse {
  success: boolean;
}

export const PENGGUNA_PACKAGE_NAME = "pengguna";

export interface PenggunaServiceClient {
  createPengguna(request: CreatePenggunaRequest): Observable<PenggunaResponse>;

  getPenggunas(request: GetPenggunasRequest): Observable<GetPenggunasResponse>;

  getPengguna(request: GetPenggunaRequest): Observable<PenggunaResponse>;

  updatePengguna(request: UpdatePenggunaRequest): Observable<PenggunaResponse>;

  deletePengguna(request: DeletePenggunaRequest): Observable<DeletePenggunaResponse>;
}

export interface PenggunaServiceController {
  createPengguna(
    request: CreatePenggunaRequest,
  ): Promise<PenggunaResponse> | Observable<PenggunaResponse> | PenggunaResponse;

  getPenggunas(
    request: GetPenggunasRequest,
  ): Promise<GetPenggunasResponse> | Observable<GetPenggunasResponse> | GetPenggunasResponse;

  getPengguna(request: GetPenggunaRequest): Promise<PenggunaResponse> | Observable<PenggunaResponse> | PenggunaResponse;

  updatePengguna(
    request: UpdatePenggunaRequest,
  ): Promise<PenggunaResponse> | Observable<PenggunaResponse> | PenggunaResponse;

  deletePengguna(
    request: DeletePenggunaRequest,
  ): Promise<DeletePenggunaResponse> | Observable<DeletePenggunaResponse> | DeletePenggunaResponse;
}

export function PenggunaServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createPengguna", "getPenggunas", "getPengguna", "updatePengguna", "deletePengguna"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PenggunaService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PenggunaService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PENGGUNA_SERVICE_NAME = "PenggunaService";
