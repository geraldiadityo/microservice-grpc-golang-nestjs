// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/barang/barang.proto

package barang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BarangService_CreateBarang_FullMethodName = "/barang.BarangService/CreateBarang"
	BarangService_GetBarangs_FullMethodName   = "/barang.BarangService/GetBarangs"
	BarangService_GetBarang_FullMethodName    = "/barang.BarangService/GetBarang"
	BarangService_UpdateBarang_FullMethodName = "/barang.BarangService/UpdateBarang"
	BarangService_DeleteBarang_FullMethodName = "/barang.BarangService/DeleteBarang"
)

// BarangServiceClient is the client API for BarangService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarangServiceClient interface {
	CreateBarang(ctx context.Context, in *CreateBarangRequest, opts ...grpc.CallOption) (*BarangResponse, error)
	GetBarangs(ctx context.Context, in *GetBarangsRequest, opts ...grpc.CallOption) (*GetBarangsResponse, error)
	GetBarang(ctx context.Context, in *GetBarangRequest, opts ...grpc.CallOption) (*BarangResponse, error)
	UpdateBarang(ctx context.Context, in *UpdateBarangRequest, opts ...grpc.CallOption) (*BarangResponse, error)
	DeleteBarang(ctx context.Context, in *DeleteBarangRequest, opts ...grpc.CallOption) (*DeleteBarangResponse, error)
}

type barangServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBarangServiceClient(cc grpc.ClientConnInterface) BarangServiceClient {
	return &barangServiceClient{cc}
}

func (c *barangServiceClient) CreateBarang(ctx context.Context, in *CreateBarangRequest, opts ...grpc.CallOption) (*BarangResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BarangResponse)
	err := c.cc.Invoke(ctx, BarangService_CreateBarang_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barangServiceClient) GetBarangs(ctx context.Context, in *GetBarangsRequest, opts ...grpc.CallOption) (*GetBarangsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBarangsResponse)
	err := c.cc.Invoke(ctx, BarangService_GetBarangs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barangServiceClient) GetBarang(ctx context.Context, in *GetBarangRequest, opts ...grpc.CallOption) (*BarangResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BarangResponse)
	err := c.cc.Invoke(ctx, BarangService_GetBarang_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barangServiceClient) UpdateBarang(ctx context.Context, in *UpdateBarangRequest, opts ...grpc.CallOption) (*BarangResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BarangResponse)
	err := c.cc.Invoke(ctx, BarangService_UpdateBarang_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barangServiceClient) DeleteBarang(ctx context.Context, in *DeleteBarangRequest, opts ...grpc.CallOption) (*DeleteBarangResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBarangResponse)
	err := c.cc.Invoke(ctx, BarangService_DeleteBarang_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarangServiceServer is the server API for BarangService service.
// All implementations must embed UnimplementedBarangServiceServer
// for forward compatibility.
type BarangServiceServer interface {
	CreateBarang(context.Context, *CreateBarangRequest) (*BarangResponse, error)
	GetBarangs(context.Context, *GetBarangsRequest) (*GetBarangsResponse, error)
	GetBarang(context.Context, *GetBarangRequest) (*BarangResponse, error)
	UpdateBarang(context.Context, *UpdateBarangRequest) (*BarangResponse, error)
	DeleteBarang(context.Context, *DeleteBarangRequest) (*DeleteBarangResponse, error)
	mustEmbedUnimplementedBarangServiceServer()
}

// UnimplementedBarangServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBarangServiceServer struct{}

func (UnimplementedBarangServiceServer) CreateBarang(context.Context, *CreateBarangRequest) (*BarangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBarang not implemented")
}
func (UnimplementedBarangServiceServer) GetBarangs(context.Context, *GetBarangsRequest) (*GetBarangsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarangs not implemented")
}
func (UnimplementedBarangServiceServer) GetBarang(context.Context, *GetBarangRequest) (*BarangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBarang not implemented")
}
func (UnimplementedBarangServiceServer) UpdateBarang(context.Context, *UpdateBarangRequest) (*BarangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBarang not implemented")
}
func (UnimplementedBarangServiceServer) DeleteBarang(context.Context, *DeleteBarangRequest) (*DeleteBarangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBarang not implemented")
}
func (UnimplementedBarangServiceServer) mustEmbedUnimplementedBarangServiceServer() {}
func (UnimplementedBarangServiceServer) testEmbeddedByValue()                       {}

// UnsafeBarangServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarangServiceServer will
// result in compilation errors.
type UnsafeBarangServiceServer interface {
	mustEmbedUnimplementedBarangServiceServer()
}

func RegisterBarangServiceServer(s grpc.ServiceRegistrar, srv BarangServiceServer) {
	// If the following call pancis, it indicates UnimplementedBarangServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BarangService_ServiceDesc, srv)
}

func _BarangService_CreateBarang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarangServiceServer).CreateBarang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarangService_CreateBarang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarangServiceServer).CreateBarang(ctx, req.(*CreateBarangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarangService_GetBarangs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarangsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarangServiceServer).GetBarangs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarangService_GetBarangs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarangServiceServer).GetBarangs(ctx, req.(*GetBarangsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarangService_GetBarang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarangServiceServer).GetBarang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarangService_GetBarang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarangServiceServer).GetBarang(ctx, req.(*GetBarangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarangService_UpdateBarang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarangServiceServer).UpdateBarang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarangService_UpdateBarang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarangServiceServer).UpdateBarang(ctx, req.(*UpdateBarangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarangService_DeleteBarang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBarangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarangServiceServer).DeleteBarang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarangService_DeleteBarang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarangServiceServer).DeleteBarang(ctx, req.(*DeleteBarangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BarangService_ServiceDesc is the grpc.ServiceDesc for BarangService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarangService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "barang.BarangService",
	HandlerType: (*BarangServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBarang",
			Handler:    _BarangService_CreateBarang_Handler,
		},
		{
			MethodName: "GetBarangs",
			Handler:    _BarangService_GetBarangs_Handler,
		},
		{
			MethodName: "GetBarang",
			Handler:    _BarangService_GetBarang_Handler,
		},
		{
			MethodName: "UpdateBarang",
			Handler:    _BarangService_UpdateBarang_Handler,
		},
		{
			MethodName: "DeleteBarang",
			Handler:    _BarangService_DeleteBarang_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/barang/barang.proto",
}
