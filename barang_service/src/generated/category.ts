// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: category.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "category";

export interface CreateCategoryRequest {
  name: string;
}

export interface GetCategoryRequest {
  id: number;
}

export interface GetCategoriesRequest {
}

export interface UpdateCategoryRequest {
  id: number;
  name: string;
}

export interface DeleteCategoryRequest {
  id: number;
}

export interface CategoryResponse {
  id: number;
  name: string;
}

export interface GetCategoriesResponse {
  categories: CategoryResponse[];
}

export interface DeleteCategoryResponse {
  success: boolean;
}

export const CATEGORY_PACKAGE_NAME = "category";

export interface CategoryServiceClient {
  createCategory(request: CreateCategoryRequest): Observable<CategoryResponse>;

  getCategories(request: GetCategoriesRequest): Observable<GetCategoriesResponse>;

  getCategory(request: GetCategoryRequest): Observable<CategoryResponse>;

  updateCategory(request: UpdateCategoryRequest): Observable<CategoryResponse>;

  deleteCategory(request: DeleteCategoryRequest): Observable<DeleteCategoryResponse>;
}

export interface CategoryServiceController {
  createCategory(
    request: CreateCategoryRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  getCategories(
    request: GetCategoriesRequest,
  ): Promise<GetCategoriesResponse> | Observable<GetCategoriesResponse> | GetCategoriesResponse;

  getCategory(request: GetCategoryRequest): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  updateCategory(
    request: UpdateCategoryRequest,
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  deleteCategory(
    request: DeleteCategoryRequest,
  ): Promise<DeleteCategoryResponse> | Observable<DeleteCategoryResponse> | DeleteCategoryResponse;
}

export function CategoryServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createCategory",
      "getCategories",
      "getCategory",
      "updateCategory",
      "deleteCategory",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CategoryService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CategoryService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CATEGORY_SERVICE_NAME = "CategoryService";
