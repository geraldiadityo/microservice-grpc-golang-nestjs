// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: barang.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "barang";

export interface CreateBarangRequest {
  name: string;
  categoryId: number;
}

export interface GetBarangsRequest {
}

export interface GetBarangRequest {
  id: number;
}

export interface UpdateBarangRequest {
  id: number;
  name: string;
  categoryId: number;
}

export interface DeleteBarangRequest {
  id: number;
}

export interface BarangResponse {
  id: number;
  name: string;
  category: CategoryResponse | undefined;
}

export interface GetBarangsResponse {
  barangs: BarangResponse[];
}

export interface DeleteBarangResponse {
  success: boolean;
}

export interface CategoryResponse {
  id: number;
  name: string;
}

export const BARANG_PACKAGE_NAME = "barang";

export interface BarangServiceClient {
  createBarang(request: CreateBarangRequest): Observable<BarangResponse>;

  getBarangs(request: GetBarangsRequest): Observable<GetBarangsResponse>;

  getBarang(request: GetBarangRequest): Observable<BarangResponse>;

  updateBarang(request: UpdateBarangRequest): Observable<BarangResponse>;

  deleteBarang(request: DeleteBarangRequest): Observable<DeleteBarangResponse>;
}

export interface BarangServiceController {
  createBarang(request: CreateBarangRequest): Promise<BarangResponse> | Observable<BarangResponse> | BarangResponse;

  getBarangs(
    request: GetBarangsRequest,
  ): Promise<GetBarangsResponse> | Observable<GetBarangsResponse> | GetBarangsResponse;

  getBarang(request: GetBarangRequest): Promise<BarangResponse> | Observable<BarangResponse> | BarangResponse;

  updateBarang(request: UpdateBarangRequest): Promise<BarangResponse> | Observable<BarangResponse> | BarangResponse;

  deleteBarang(
    request: DeleteBarangRequest,
  ): Promise<DeleteBarangResponse> | Observable<DeleteBarangResponse> | DeleteBarangResponse;
}

export function BarangServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createBarang", "getBarangs", "getBarang", "updateBarang", "deleteBarang"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BarangService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BarangService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BARANG_SERVICE_NAME = "BarangService";
